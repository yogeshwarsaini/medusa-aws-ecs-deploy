"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }

var _L5A2ID7Scjs = require('./L5A2ID7S.cjs');



var _FDRJDQ5Ycjs = require('./FDRJDQ5Y.cjs');




var _7EQBAZ46cjs = require('./7EQBAZ46.cjs');

// src/utils/system.tsx
var _react = require('react'); var React = _interopRequireWildcard(_react);
var _jsxruntime = require('react/jsx-runtime');
function forwardRef2(render) {
  const Role = React.forwardRef((props, ref) => render(_7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, props), { ref })));
  Role.displayName = render.displayName || render.name;
  return Role;
}
function memo2(Component, propsAreEqual) {
  return React.memo(Component, propsAreEqual);
}
function createElement(Type, props) {
  const _a = props, { wrapElement, render } = _a, rest = _7EQBAZ46cjs.__objRest.call(void 0, _a, ["wrapElement", "render"]);
  const mergedRef = _L5A2ID7Scjs.useMergeRefs.call(void 0, props.ref, _FDRJDQ5Ycjs.getRefProperty.call(void 0, render));
  let element;
  if (React.isValidElement(render)) {
    const renderProps = _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, render.props), { ref: mergedRef });
    element = React.cloneElement(render, _FDRJDQ5Ycjs.mergeProps.call(void 0, rest, renderProps));
  } else if (render) {
    element = render(rest);
  } else {
    element = /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Type, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, rest));
  }
  if (wrapElement) {
    return wrapElement(element);
  }
  return element;
}
function createHook(useProps) {
  const useRole = (props = {}) => {
    return useProps(props);
  };
  useRole.displayName = useProps.name;
  return useRole;
}
function createStoreContext(providers = [], scopedProviders = []) {
  const context = React.createContext(void 0);
  const scopedContext = React.createContext(void 0);
  const useContext2 = () => React.useContext(context);
  const useScopedContext = (onlyScoped = false) => {
    const scoped = React.useContext(scopedContext);
    const store = useContext2();
    if (onlyScoped) return scoped;
    return scoped || store;
  };
  const useProviderContext = () => {
    const scoped = React.useContext(scopedContext);
    const store = useContext2();
    if (scoped && scoped === store) return;
    return store;
  };
  const ContextProvider = (props) => {
    return providers.reduceRight(
      (children, Provider) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Provider, _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, props), { children })),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, context.Provider, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, props))
    );
  };
  const ScopedContextProvider = (props) => {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ContextProvider, _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, props), { children: scopedProviders.reduceRight(
      (children, Provider) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Provider, _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, props), { children })),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, scopedContext.Provider, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, props))
    ) }));
  };
  return {
    context,
    scopedContext,
    useContext: useContext2,
    useScopedContext,
    useProviderContext,
    ContextProvider,
    ScopedContextProvider
  };
}







exports.forwardRef = forwardRef2; exports.memo = memo2; exports.createElement = createElement; exports.createHook = createHook; exports.createStoreContext = createStoreContext;
