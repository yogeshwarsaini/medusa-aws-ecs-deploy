"use client";
import {
  useFormContext
} from "../__chunks/F53GGRQB.js";
import {
  useCollectionItem
} from "../__chunks/RZ4GPYOB.js";
import "../__chunks/VDHZ5F7K.js";
import {
  createElement,
  createHook,
  forwardRef,
  memo
} from "../__chunks/LMDWO4NN.js";
import {
  useId,
  useMergeRefs
} from "../__chunks/ABQUS43J.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/form/form-description.tsx
import { invariant } from "@ariakit/core/utils/misc";
import { useCallback, useRef } from "react";
var TagName = "div";
var useFormDescription = createHook(
  function useFormDescription2(_a) {
    var _b = _a, {
      store,
      name: nameProp,
      getItem: getItemProp
    } = _b, props = __objRest(_b, [
      "store",
      "name",
      "getItem"
    ]);
    const context = useFormContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "FormDescription must be wrapped in a Form component."
    );
    const id = useId(props.id);
    const ref = useRef(null);
    const name = `${nameProp}`;
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), {
          id: id || item.id,
          name,
          type: "description"
        });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, name, getItemProp]
    );
    props = __spreadProps(__spreadValues({
      id
    }, props), {
      ref: useMergeRefs(ref, props.ref)
    });
    props = useCollectionItem(__spreadProps(__spreadValues({ store }, props), { getItem }));
    return props;
  }
);
var FormDescription = memo(
  forwardRef(function FormDescription2(props) {
    const htmlProps = useFormDescription(props);
    return createElement(TagName, htmlProps);
  })
);
export {
  FormDescription,
  useFormDescription
};
