"use client";
import {
  useDialogDisclosure
} from "../__chunks/NTITENHD.js";
import "../__chunks/F5MUBM3I.js";
import {
  useComboboxProviderContext
} from "../__chunks/S43UC3DV.js";
import "../__chunks/MTZPJQMC.js";
import "../__chunks/RS7LB2H4.js";
import "../__chunks/S6EF7IVO.js";
import "../__chunks/P7GR5CS5.js";
import "../__chunks/PCKO3OQ5.js";
import "../__chunks/2RSXSRCN.js";
import "../__chunks/PFRGBC2K.js";
import "../__chunks/SWN3JYXT.js";
import "../__chunks/VDHZ5F7K.js";
import {
  createElement,
  createHook,
  forwardRef
} from "../__chunks/LMDWO4NN.js";
import {
  useEvent
} from "../__chunks/ABQUS43J.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/combobox/combobox-disclosure.tsx
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var TagName = "button";
var children = /* @__PURE__ */ jsx(
  "svg",
  {
    "aria-hidden": "true",
    display: "block",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 1.5,
    viewBox: "0 0 16 16",
    height: "1em",
    width: "1em",
    pointerEvents: "none",
    children: /* @__PURE__ */ jsx("polyline", { points: "4,6 8,10 12,6" })
  }
);
var useComboboxDisclosure = createHook(function useComboboxDisclosure2(_a) {
  var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
  const context = useComboboxProviderContext();
  store = store || context;
  invariant(
    store,
    process.env.NODE_ENV !== "production" && "ComboboxDisclosure must receive a `store` prop or be wrapped in a ComboboxProvider component."
  );
  const onMouseDownProp = props.onMouseDown;
  const onMouseDown = useEvent((event) => {
    onMouseDownProp == null ? void 0 : onMouseDownProp(event);
    event.preventDefault();
    store == null ? void 0 : store.move(null);
  });
  const onClickProp = props.onClick;
  const onClick = useEvent((event) => {
    onClickProp == null ? void 0 : onClickProp(event);
    if (event.defaultPrevented) return;
    if (!store) return;
    const { baseElement } = store.getState();
    store.setDisclosureElement(baseElement);
  });
  const open = store.useState("open");
  props = __spreadProps(__spreadValues({
    children,
    tabIndex: -1,
    "aria-label": open ? "Hide popup" : "Show popup",
    "aria-expanded": open
  }, props), {
    onMouseDown,
    onClick
  });
  props = useDialogDisclosure(__spreadValues({ store }, props));
  return props;
});
var ComboboxDisclosure = forwardRef(function ComboboxDisclosure2(props) {
  const htmlProps = useComboboxDisclosure(props);
  return createElement(TagName, htmlProps);
});
export {
  ComboboxDisclosure,
  useComboboxDisclosure
};
