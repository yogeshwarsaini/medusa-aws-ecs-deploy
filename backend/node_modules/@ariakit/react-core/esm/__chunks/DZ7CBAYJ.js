"use client";
import {
  MenubarScopedContextProvider,
  useMenubarProviderContext
} from "./62UHHO2X.js";
import {
  useMenubarStore
} from "./BKQBQI36.js";
import {
  useComposite
} from "./5JTVDSTH.js";
import {
  createElement,
  createHook,
  forwardRef
} from "./LMDWO4NN.js";
import {
  useWrapElement
} from "./ABQUS43J.js";
import {
  __objRest,
  __spreadValues
} from "./3YLGPPWQ.js";

// src/menubar/menubar.tsx
import { jsx } from "react/jsx-runtime";
var TagName = "div";
var useMenubar = createHook(
  function useMenubar2(_a) {
    var _b = _a, {
      store: storeProp,
      composite = true,
      orientation: orientationProp,
      virtualFocus,
      focusLoop,
      rtl
    } = _b, props = __objRest(_b, [
      "store",
      "composite",
      "orientation",
      "virtualFocus",
      "focusLoop",
      "rtl"
    ]);
    const context = useMenubarProviderContext();
    storeProp = storeProp || context;
    const store = useMenubarStore({
      store: storeProp,
      orientation: orientationProp,
      virtualFocus,
      focusLoop,
      rtl
    });
    const orientation = store.useState(
      (state) => !composite || state.orientation === "both" ? void 0 : state.orientation
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(MenubarScopedContextProvider, { value: store, children: element }),
      [store]
    );
    if (composite) {
      props = __spreadValues({
        role: "menubar",
        "aria-orientation": orientation
      }, props);
    }
    props = useComposite(__spreadValues({ store, composite }, props));
    return props;
  }
);
var Menubar = forwardRef(function Menubar2(props) {
  const htmlProps = useMenubar(props);
  return createElement(TagName, htmlProps);
});

export {
  useMenubar,
  Menubar
};
