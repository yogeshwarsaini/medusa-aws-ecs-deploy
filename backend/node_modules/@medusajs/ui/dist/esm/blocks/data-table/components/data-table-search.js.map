{"version":3,"file":"data-table-search.js","sourceRoot":"","sources":["../../../../../src/blocks/data-table/components/data-table-search.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAA;AAC1C,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAA;AAChD,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAA;AACjC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAE9B,OAAO,EAAE,mBAAmB,EAAE,MAAM,oDAAoD,CAAA;AAiBxF;;;GAGG;AACH,MAAM,eAAe,GAAG,CAAC,KAA2B,EAAE,EAAE;IACtD,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAA;IACpC,MAAM,EAAE,QAAQ,EAAE,GAAG,mBAAmB,EAAE,CAAA;IAE1C,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC3B,MAAM,IAAI,KAAK,CACb,qGAAqG,CACtG,CAAA;IACH,CAAC;IAED,IAAI,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC1B,OAAO,oBAAC,uBAAuB,OAAG,CAAA;IACpC,CAAC;IAED,OAAO,CACL,oBAAC,KAAK,IACJ,IAAI,EAAC,OAAO,EACZ,IAAI,EAAC,QAAQ,EACb,KAAK,EAAE,QAAQ,CAAC,SAAS,EAAE,EAC3B,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EACxD,SAAS,EAAE,GAAG,CACZ;YACE,yBAAyB,EAAE,QAAQ,CAAC,SAAS;SAC9C,EACD,SAAS,CACV,KACG,IAAI,GACR,CACH,CAAA;AACH,CAAC,CAAA;AACD,eAAe,CAAC,WAAW,GAAG,kBAAkB,CAAA;AAEhD,MAAM,uBAAuB,GAAG,GAAG,EAAE;IACnC,OAAO,oBAAC,QAAQ,IAAC,SAAS,EAAC,eAAe,GAAG,CAAA;AAC/C,CAAC,CAAA;AAED,OAAO,EAAE,eAAe,EAAE,CAAA","sourcesContent":["\"use client\"\n\nimport { Input } from \"@/components/input\"\nimport { Skeleton } from \"@/components/skeleton\"\nimport { clx } from \"@/utils/clx\"\nimport * as React from \"react\"\n\nimport { useDataTableContext } from \"@/blocks/data-table/context/use-data-table-context\"\n\ninterface DataTableSearchProps {\n  /**\n   * If true, the search input will be focused on mount.\n   */\n  autoFocus?: boolean\n  /**\n   * Additional classes to pass to the search input.\n   */\n  className?: string\n  /**\n   * The placeholder text to show in the search input.\n   */\n  placeholder?: string\n}\n\n/**\n * This component adds a search input to the data table, allowing users\n * to search through the table's data.\n */\nconst DataTableSearch = (props: DataTableSearchProps) => {\n  const { className, ...rest } = props\n  const { instance } = useDataTableContext()\n\n  if (!instance.enableSearch) {\n    throw new Error(\n      \"DataTable.Search was rendered but search is not enabled. Make sure to pass search to 'useDataTable'\"\n    )\n  }\n\n  if (instance.showSkeleton) {\n    return <DataTableSearchSkeleton />\n  }\n\n  return (\n    <Input\n      size=\"small\"\n      type=\"search\"\n      value={instance.getSearch()}\n      onChange={(e) => instance.onSearchChange(e.target.value)}\n      className={clx(\n        {\n          \"pr-[calc(15px+2px+8px)]\": instance.isLoading,\n        },\n        className\n      )}\n      {...rest}\n    />\n  )\n}\nDataTableSearch.displayName = \"DataTable.Search\"\n\nconst DataTableSearchSkeleton = () => {\n  return <Skeleton className=\"h-7 w-[128px]\" />\n}\n\nexport { DataTableSearch }\nexport type { DataTableSearchProps }\n\n"]}