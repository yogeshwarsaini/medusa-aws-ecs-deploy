{"version":3,"file":"data-table-command-bar.js","sourceRoot":"","sources":["../../../../../src/blocks/data-table/components/data-table-command-bar.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAE9B,OAAO,EAAE,mBAAmB,EAAE,MAAM,oDAAoD,CAAA;AACxF,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAA;AAUrD;;;GAGG;AACH,MAAM,mBAAmB,GAAG,CAAC,KAA+B,EAAE,EAAE;IAC9D,MAAM,EAAE,QAAQ,EAAE,GAAG,mBAAmB,EAAE,CAAA;IAE1C,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAA;IACvC,MAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,EAAE,CAAA;IAE/C,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,MAAM,CAAA;IAEpD,MAAM,IAAI,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,CAAA;IAEzD,SAAS,gBAAgB,CAAC,KAAa;QACrC,IAAI,OAAO,KAAK,CAAC,aAAa,KAAK,UAAU,EAAE,CAAC;YAC9C,OAAO,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;QACnC,CAAC;QAED,OAAO,KAAK,CAAC,aAAa,CAAA;IAC5B,CAAC;IAED,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvC,OAAO,IAAI,CAAA;IACb,CAAC;IAED,OAAO,CACL,oBAAC,UAAU,IAAC,IAAI,EAAE,IAAI;QACpB,oBAAC,UAAU,CAAC,GAAG;YACZ,KAAK,CAAC,aAAa,IAAI,CACtB,oBAAC,KAAK,CAAC,QAAQ;gBACb,oBAAC,UAAU,CAAC,KAAK,QAAE,gBAAgB,CAAC,KAAK,CAAC,CAAoB;gBAC9D,oBAAC,UAAU,CAAC,SAAS,OAAG,CACT,CAClB;YACA,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,CAC9B,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAE,GAAG;gBACtB,oBAAC,UAAU,CAAC,OAAO,IACjB,GAAG,EAAE,OAAO,CAAC,KAAK,EAClB,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,EAC1C,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAC1B;gBACD,GAAG,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAC,UAAU,CAAC,SAAS,OAAG,CACvC,CAClB,CAAC,CACa,CACN,CACd,CAAA;AACH,CAAC,CAAA;AACD,mBAAmB,CAAC,WAAW,GAAG,sBAAsB,CAAA;AAExD,OAAO,EAAE,mBAAmB,EAAE,CAAA","sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { useDataTableContext } from \"@/blocks/data-table/context/use-data-table-context\"\nimport { CommandBar } from \"@/components/command-bar\"\n\ninterface DataTableCommandBarProps {\n  /**\n   * The label to show when items are selected. If a function is passed, \n   * it will be called with the count of selected items.\n   */\n  selectedLabel?: ((count: number) => string) | string\n}\n\n/**\n * This component adds a command bar to the data table, which is used\n * to show commands that can be executed on the selected rows.\n */\nconst DataTableCommandBar = (props: DataTableCommandBarProps) => {\n  const { instance } = useDataTableContext()\n\n  const commands = instance.getCommands()\n  const rowSelection = instance.getRowSelection()\n\n  const count = Object.keys(rowSelection || []).length\n\n  const open = commands && commands.length > 0 && count > 0\n\n  function getSelectedLabel(count: number) {\n    if (typeof props.selectedLabel === \"function\") {\n      return props.selectedLabel(count)\n    }\n\n    return props.selectedLabel\n  }\n\n  if (!commands || commands.length === 0) {\n    return null\n  }\n\n  return (\n    <CommandBar open={open}>\n      <CommandBar.Bar>\n        {props.selectedLabel && (\n          <React.Fragment>\n            <CommandBar.Value>{getSelectedLabel(count)}</CommandBar.Value>\n            <CommandBar.Seperator />\n          </React.Fragment>\n        )}\n        {commands.map((command, idx) => (\n          <React.Fragment key={idx}>\n            <CommandBar.Command\n              key={command.label}\n              action={() => command.action(rowSelection)}\n              label={command.label}\n              shortcut={command.shortcut}\n            />\n            {idx < commands.length - 1 && <CommandBar.Seperator />}\n          </React.Fragment>\n        ))}\n      </CommandBar.Bar>\n    </CommandBar>\n  )\n}\nDataTableCommandBar.displayName = \"DataTable.CommandBar\"\n\nexport { DataTableCommandBar }\nexport type { DataTableCommandBarProps }\n\n"]}