{"version":3,"file":"data-table-action-cell.js","sourceRoot":"","sources":["../../../../../src/blocks/data-table/components/data-table-action-cell.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAG9B,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAA;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAA;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAA;AAOpD,MAAM,mBAAmB,GAAG,CAAS,EACnC,GAAG,GAC6B,EAAE,EAAE;IACpC,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAErB,CAAA;IACb,MAAM,OAAO,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,CAAA;IAEhC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAA;IACb,CAAC;IAED,MAAM,eAAe,GAAG,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAA;IAE9E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC;QACpC,OAAO,IAAI,CAAA;IACb,CAAC;IAED,OAAO,CACL,oBAAC,YAAY;QACX,oBAAC,YAAY,CAAC,OAAO,IAAC,OAAO,QAAC,SAAS,EAAC,MAAM;YAC5C,oBAAC,UAAU,IAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAC,aAAa;gBAC5C,oBAAC,kBAAkB,OAAG,CACX,CACQ;QACvB,oBAAC,YAAY,CAAC,OAAO,IAAC,IAAI,EAAC,QAAQ,IAChC,eAAe,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE;YAC1C,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;YAC5C,MAAM,MAAM,GAAG,GAAG,KAAK,eAAe,CAAC,MAAM,GAAG,CAAC,CAAA;YAEjD,OAAO,OAAO,CAAC,CAAC,CAAC,CACf,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAE,GAAG;gBACrB,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAC7B,oBAAC,YAAY,CAAC,IAAI,IAChB,GAAG,EAAE,MAAM,CAAC,KAAK,EACjB,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;wBACb,CAAC,CAAC,eAAe,EAAE,CAAA;wBACnB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;oBACrB,CAAC,EACD,SAAS,EAAC,mDAAmD;oBAE5D,MAAM,CAAC,IAAI;oBACX,MAAM,CAAC,KAAK,CACK,CACrB,CAAC;gBACD,CAAC,MAAM,IAAI,oBAAC,YAAY,CAAC,SAAS,OAAG,CACvB,CAClB,CAAC,CAAC,CAAC,CACF,oBAAC,YAAY,CAAC,IAAI,IAChB,GAAG,EAAE,aAAa,CAAC,KAAK,EACxB,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;oBACb,CAAC,CAAC,eAAe,EAAE,CAAA;oBACnB,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;gBAC5B,CAAC,EACD,SAAS,EAAC,mDAAmD;gBAE5D,aAAa,CAAC,IAAI;gBAClB,aAAa,CAAC,KAAK,CACF,CACrB,CAAA;QACH,CAAC,CAAC,CACmB,CACV,CAChB,CAAA;AACH,CAAC,CAAA;AACD,mBAAmB,CAAC,WAAW,GAAG,sBAAsB,CAAA;AAExD,OAAO,EAAE,mBAAmB,EAAE,CAAA","sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport type { DataTableActionColumnDefMeta } from \"@/blocks/data-table/types\"\nimport { DropdownMenu } from \"@/components/dropdown-menu\"\nimport { IconButton } from \"@/components/icon-button\"\nimport { EllipsisHorizontal } from \"@medusajs/icons\"\nimport { CellContext } from \"@tanstack/react-table\"\n\ninterface DataTableActionCellProps<TData> {\n  ctx: CellContext<TData, unknown>\n}\n\nconst DataTableActionCell = <TData,>({\n  ctx,\n}: DataTableActionCellProps<TData>) => {\n  const meta = ctx.column.columnDef.meta as\n    | DataTableActionColumnDefMeta<TData>\n    | undefined\n  const actions = meta?.___actions\n\n  if (!actions) {\n    return null\n  }\n\n  const resolvedActions = typeof actions === \"function\" ? actions(ctx) : actions\n\n  if (!Array.isArray(resolvedActions)) {\n    return null\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenu.Trigger asChild className=\"ml-1\">\n        <IconButton size=\"small\" variant=\"transparent\">\n          <EllipsisHorizontal />\n        </IconButton>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content side=\"bottom\">\n        {resolvedActions.map((actionOrGroup, idx) => {\n          const isArray = Array.isArray(actionOrGroup)\n          const isLast = idx === resolvedActions.length - 1\n\n          return isArray ? (\n            <React.Fragment key={idx}>\n              {actionOrGroup.map((action) => (\n                <DropdownMenu.Item\n                  key={action.label}\n                  onClick={(e) => {\n                    e.stopPropagation()\n                    action.onClick(ctx)\n                  }}\n                  className=\"[&>svg]:text-ui-fg-subtle flex items-center gap-2\"\n                >\n                  {action.icon}\n                  {action.label}\n                </DropdownMenu.Item>\n              ))}\n              {!isLast && <DropdownMenu.Separator />}\n            </React.Fragment>\n          ) : (\n            <DropdownMenu.Item\n              key={actionOrGroup.label}\n              onClick={(e) => {\n                e.stopPropagation()\n                actionOrGroup.onClick(ctx)\n              }}\n              className=\"[&>svg]:text-ui-fg-subtle flex items-center gap-2\"\n            >\n              {actionOrGroup.icon}\n              {actionOrGroup.label}\n            </DropdownMenu.Item>\n          )\n        })}\n      </DropdownMenu.Content>\n    </DropdownMenu>\n  )\n}\nDataTableActionCell.displayName = \"DataTable.ActionCell\"\n\nexport { DataTableActionCell }\nexport type { DataTableActionCellProps }\n\n"]}