{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/blocks/data-table/types.ts"],"names":[],"mappings":"AAgRA,MAAM,CAAN,IAAY,mBAIX;AAJD,WAAY,mBAAmB;IAC7B,sCAAe,CAAA;IACf,wDAAiC,CAAA;IACjC,8CAAuB,CAAA;AACzB,CAAC,EAJW,mBAAmB,KAAnB,mBAAmB,QAI9B","sourcesContent":["import type {\n  AccessorFn,\n  AccessorFnColumnDef,\n  AccessorKeyColumnDef,\n  CellContext,\n  Column,\n  ColumnDef,\n  ColumnFilter,\n  ColumnSort,\n  DeepKeys,\n  DeepValue,\n  DisplayColumnDef,\n  HeaderContext,\n  IdentifiedColumnDef,\n  IdIdentifier,\n  PaginationState,\n  Row,\n  RowData,\n  RowSelectionState,\n  SortDirection,\n  StringHeaderIdentifier,\n  StringOrTemplateHeader,\n} from \"@tanstack/react-table\"\n\nexport type DataTableRowData = RowData\n\nexport type DataTableRow<TData extends DataTableRowData> = Row<TData>\n\nexport type DataTableAction<TData> = {\n  label: string\n  onClick: (ctx: CellContext<TData, unknown>) => void\n  icon?: React.ReactNode\n}\n\nexport interface DataTableCellContext<TData extends DataTableRowData, TValue>\n  extends CellContext<TData, TValue> {}\n\nexport interface DataTableHeaderContext<TData extends DataTableRowData, TValue>\n  extends HeaderContext<TData, TValue> {}\n\nexport type DataTableSortDirection = SortDirection\n\nexport interface DataTableActionColumnDef<TData>\n  extends Pick<DisplayColumnDef<TData>, \"meta\"> {\n  actions:\n    | DataTableAction<TData>[]\n    | DataTableAction<TData>[][]\n    | ((\n        ctx: DataTableCellContext<TData, unknown>\n      ) => DataTableAction<TData>[] | DataTableAction<TData>[][])\n}\n\nexport interface DataTableSelectColumnDef<TData>\n  extends Pick<DisplayColumnDef<TData>, \"cell\" | \"header\"> {}\n\nexport type DataTableSortableColumnDef = {\n  /**\n   * The label to display in the sorting menu.\n   */\n  sortLabel?: string\n  /**\n   * The label to display in the sorting menu when sorting in ascending order.\n   */\n  sortAscLabel?: string\n  /**\n   * The label to display in the sorting menu when sorting in descending order.\n   */\n  sortDescLabel?: string\n  /**\n   * Whether the column is sortable.\n   * @default false\n   */\n  enableSorting?: boolean\n}\n\nexport type DataTableSortableColumnDefMeta = {\n  ___sortMetaData?: DataTableSortableColumnDef\n}\n\nexport type DataTableActionColumnDefMeta<TData> = {\n  ___actions?:\n    | DataTableAction<TData>[]\n    | DataTableAction<TData>[][]\n    | ((ctx: DataTableCellContext<TData, unknown>) => DataTableAction<TData>[])\n}\n\nexport interface DataTableColumn<\n  TData extends DataTableRowData,\n  TValue = unknown\n> extends Column<TData, TValue> {}\n\nexport type DataTableColumnDef<\n  TData extends DataTableRowData,\n  TValue = unknown\n> = ColumnDef<TData, TValue>\n\nexport type DataTableColumnSizing = {\n  /**\n   * The maximum size of the column.\n   */\n  maxSize?: number\n  /**\n   * The minimum size of the column.\n   */\n  minSize?: number\n  /**\n   * The size of the column.\n   */\n  size?: number\n}\n\ntype DataTableColumnIdentifiers<TData extends DataTableRowData, TValue> =\n  | IdIdentifier<TData, TValue>\n  | StringHeaderIdentifier\n\nexport type DataTableDisplayColumnDef<\n  TData extends DataTableRowData,\n  TValue = unknown\n> = Pick<\n  DisplayColumnDef<TData, TValue>,\n  \"meta\" | \"header\" | \"cell\" | \"minSize\" | \"maxSize\" | \"size\"\n> &\n  DataTableColumnIdentifiers<TData, TValue>\n\nexport interface DataTableIdentifiedColumnDef<\n  TData extends DataTableRowData,\n  TValue\n> extends Pick<\n    IdentifiedColumnDef<TData, TValue>,\n    \"meta\" | \"header\" | \"cell\" | \"minSize\" | \"maxSize\" | \"size\"\n  > {\n  id?: string\n  header?: StringOrTemplateHeader<TData, TValue>\n}\n\nexport interface DataTableColumnHelper<TData> {\n  /**\n   * Create a accessor column.\n   *\n   * @param accessor The accessor to create the column for.\n   * @param column The column to create for the accessor.\n   * @returns The created accessor.\n   */\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DataTableDisplayColumnDef<TData, TValue> & DataTableSortableColumnDef\n      : DataTableIdentifiedColumnDef<TData, TValue> & DataTableSortableColumnDef\n  ) => TAccessor extends AccessorFn<TData>\n    ? AccessorFnColumnDef<TData, TValue>\n    : AccessorKeyColumnDef<TData, TValue>\n  /**\n   * Create a display column.\n   *\n   * @param column The column to create the display for.\n   * @returns The created display column.\n   */\n  display: (column: DataTableDisplayColumnDef<TData>) => DisplayColumnDef<TData>\n  /**\n   * Create an action column.\n   *\n   * @param props The props to create the action column for.\n   * @returns The created action column.\n   */\n  action: (\n    props: DataTableActionColumnDef<TData>\n  ) => DisplayColumnDef<TData, unknown>\n  /**\n   * Create a select column.\n   *\n   * @param props The props to create the select column for.\n   * @returns The created select column.\n   */\n  select: (\n    props?: DataTableSelectColumnDef<TData>\n  ) => DisplayColumnDef<TData, unknown>\n}\n\nexport interface DataTableSortingState extends ColumnSort {}\nexport interface DataTableRowSelectionState extends RowSelectionState {}\nexport interface DataTablePaginationState extends PaginationState {}\nexport type DataTableFilteringState<\n  T extends Record<string, unknown> = Record<string, unknown>\n> = {\n  [K in keyof T]: T[K]\n}\n\nexport type DataTableFilterType = \"radio\" | \"select\" | \"date\"\nexport type DataTableFilterOption<T = string> = {\n  label: string\n  value: T\n}\n\ninterface DataTableBaseFilterProps {\n  type: DataTableFilterType\n  label: string\n}\n\nexport interface DataTableRadioFilterProps extends DataTableBaseFilterProps {\n  type: \"radio\"\n  options: DataTableFilterOption[]\n}\n\nexport interface DataTableSelectFilterProps extends DataTableBaseFilterProps {\n  type: \"select\"\n  options: DataTableFilterOption[]\n}\n\nexport interface DataTableDateFilterProps extends DataTableBaseFilterProps {\n  type: \"date\"\n  /**\n   * The format of the date.\n   * @default \"date\"\n   */\n  format?: \"date\" | \"date-time\"\n  /**\n   * The label to display for the range option.\n   */\n  rangeOptionLabel?: string\n  /**\n   * The label to display for the start of the range option.\n   */\n  rangeOptionStartLabel?: string\n  /**\n   * The label to display for the end of the range option.\n   */\n  rangeOptionEndLabel?: string\n  /**\n   * Whether to disable the range option.\n   */\n  disableRangeOption?: boolean\n  /**\n   * A function to format the date value.\n   *\n   * @example\n   * ```tsx\n   * formatDateValue={(value) => value.toLocaleDateString()}\n   * ```\n   */\n  formatDateValue?: (value: Date) => string\n  /**\n   * The options to display in the filter.\n   *\n   * @example\n   * ```tsx\n   * options: [\n   *   { label: \"Today\", value: { $gte: new Date().toISOString() } },\n   *   { label: \"Yesterday\", value: { $gte: new Date(new Date().getTime() - 24 * 60 * 60 * 1000).toISOString() } },\n   * ]\n   * ```\n   */\n  options: DataTableFilterOption<DataTableDateComparisonOperator>[]\n}\n\nexport type DataTableFilterProps =\n  | DataTableRadioFilterProps\n  | DataTableSelectFilterProps\n  | DataTableDateFilterProps\n\nexport type DataTableFilter<\n  T extends DataTableFilterProps = DataTableFilterProps\n> = T & {\n  id: string\n}\n\nexport enum DataTableEmptyState {\n  EMPTY = \"EMPTY\",\n  FILTERED_EMPTY = \"FILTERED_EMPTY\",\n  POPULATED = \"POPULATED\",\n}\n\nexport type DataTableDateComparisonOperator = {\n  /**\n   * The filtered date must be greater than or equal to this value.\n   */\n  $gte?: string\n  /**\n   * The filtered date must be less than or equal to this value.\n   */\n  $lte?: string\n  /**\n   * The filtered date must be less than this value.\n   */\n  $lt?: string\n  /**\n   * The filtered date must be greater than this value.\n   */\n  $gt?: string\n}\n\ntype DataTableCommandAction = (\n  selection: DataTableRowSelectionState\n) => void | Promise<void>\n\nexport interface DataTableCommand {\n  /**\n   * The label to display in the command bar.\n   */\n  label: string\n  /**\n   * The action to perform when the command is selected.\n   */\n  action: DataTableCommandAction\n  /**\n   * The shortcut to use for the command.\n   *\n   * @example \"i\"\n   */\n  shortcut: string\n}\n\nexport type DataTableEmptyStateContent = {\n  /**\n   * The heading to display in the empty state.\n   */\n  heading?: string\n  /**\n   * The description to display in the empty state.\n   */\n  description?: string\n  /**\n   * A custom component to display in the empty state, if provided it will override the heading and description.\n   */\n  custom?: React.ReactNode\n}\n\nexport type DataTableEmptyStateProps = {\n  /**\n   * The empty state to display when the table is filtered, but no rows are found.\n   */\n  filtered?: DataTableEmptyStateContent\n  /**\n   * The empty state to display when the table is empty.\n   */\n  empty?: DataTableEmptyStateContent\n}\n\nexport interface DataTableColumnFilter extends ColumnFilter {}\n"]}