{"version":3,"file":"calendar-grid.js","sourceRoot":"","sources":["../../../../src/components/calendar/calendar-grid.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AACzD,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,EAAyB,eAAe,EAAE,SAAS,EAAE,MAAM,YAAY,CAAA;AAG9E,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAA;AAM9C,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK,EAAE,GAAG,KAAK,EAAqB,EAAE,EAAE;IAC9D,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,EAAE,CAAA;IAC9B,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IAE1E,MAAM,YAAY,GAAG,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IAEtE,OAAO,CACL,kCAAW,SAAS;QAClB,kCAAW,WAAW;YACpB,gCACG,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAC5B,4BAAI,GAAG,EAAE,KAAK,EAAE,SAAS,EAAC,+DAA+D,IAAE,GAAG,CAAM,CACrG,CAAC,CACC,CACC;QACR,mCACG,CAAC,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CACtD,4BAAI,GAAG,EAAE,SAAS,IACf,KAAK;aACH,cAAc,CAAC,SAAS,CAAC;aACzB,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CACf,IAAI,CAAC,CAAC,CAAC,CACL,oBAAC,YAAY,IAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,GAAI,CACnD,CAAC,CAAC,CAAC,CACF,4BAAI,GAAG,EAAE,CAAC,GAAI,CACf,CACF,CACA,CACN,CAAC,CACI,CACF,CACT,CAAA;AACH,CAAC,CAAA;AAED,OAAO,EAAE,YAAY,EAAE,CAAA","sourcesContent":["import { getWeeksInMonth } from \"@internationalized/date\"\nimport * as React from \"react\"\nimport { AriaCalendarGridProps, useCalendarGrid, useLocale } from \"react-aria\"\n\nimport { CalendarState } from \"react-stately\"\nimport { CalendarCell } from \"./calendar-cell\"\n\ninterface CalendarGridProps extends AriaCalendarGridProps {\n  state: CalendarState\n}\n\nconst CalendarGrid = ({ state, ...props }: CalendarGridProps) => {\n  const { locale } = useLocale()\n  const { gridProps, headerProps, weekDays } = useCalendarGrid(props, state)\n\n  const weeksInMonth = getWeeksInMonth(state.visibleRange.start, locale)\n\n  return (\n    <table {...gridProps}>\n      <thead {...headerProps}>\n        <tr>\n          {weekDays.map((day, index) => (\n            <th key={index} className=\"txt-compact-small-plus text-ui-fg-muted size-8 p-1 rounded-md\">{day}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {[...new Array(weeksInMonth).keys()].map((weekIndex) => (\n          <tr key={weekIndex}>\n            {state\n              .getDatesInWeek(weekIndex)\n              .map((date, i) =>\n                date ? (\n                  <CalendarCell key={i} state={state} date={date} />\n                ) : (\n                  <td key={i} />\n                )\n              )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport { CalendarGrid }\n"]}