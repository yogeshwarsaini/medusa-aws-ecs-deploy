{"version":3,"file":"calendar-cell.js","sourceRoot":"","sources":["../../../../src/components/calendar/calendar-cell.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAGZ,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAA;AAG5C,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAA;AAOjC,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAqB,EAAE,EAAE;IAC1D,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC9B,MAAM,EACJ,SAAS,EACT,WAAW,EACX,UAAU,EACV,qBAAqB,EACrB,UAAU,EACV,aAAa,EACb,aAAa,GACd,GAAG,eAAe,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA;IAEzC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAA;IAEhC,OAAO,CACL,+BAAQ,SAAS,EAAE,SAAS,EAAC,KAAK;QAChC,gCACM,WAAW,EACf,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,qBAAqB,EAC7B,SAAS,EAAE,GAAG,CACZ,kJAAkJ,EAClJ,2BAA2B,EAC3B,+EAA+E,EAC/E;gBACE,4CAA4C,EAAE,UAAU;gBACxD,QAAQ,EAAE,qBAAqB;gBAC/B,sDAAsD,EAAE,UAAU,IAAI,aAAa;aACpF,CACF;YAEA,aAAa;YACb,OAAO,IAAI,CACV,6BACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAE,GAAG,CACZ,4GAA4G,EAC5G;oBACE,mBAAmB,EAAE,UAAU;iBAChC,CACF,GACD,CACH,CACG,CACH,CACN,CAAA;AACH,CAAC,CAAA;AAED;;;GAGG;AACH,SAAS,UAAU,CAAC,IAAkB;IACpC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAA;IACxB,OAAO,CACL,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QAC3C,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CACvE,CAAA;AACH,CAAC;AAED,OAAO,EAAE,YAAY,EAAE,CAAA","sourcesContent":["\"use client\"\n\nimport { CalendarDate } from \"@internationalized/date\"\nimport * as React from \"react\"\nimport { useCalendarCell } from \"react-aria\"\nimport { CalendarState } from \"react-stately\"\n\nimport { clx } from \"@/utils/clx\"\n\ninterface CalendarCellProps {\n  date: CalendarDate\n  state: CalendarState\n}\n\nconst CalendarCell = ({ state, date }: CalendarCellProps) => {\n  const ref = React.useRef(null)\n  const {\n    cellProps,\n    buttonProps,\n    isSelected,\n    isOutsideVisibleRange,\n    isDisabled,\n    isUnavailable,\n    formattedDate,\n  } = useCalendarCell({ date }, state, ref)\n\n  const isToday = getIsToday(date)\n\n  return (\n    <td {...cellProps} className=\"p-1\">\n      <div\n        {...buttonProps}\n        ref={ref}\n        hidden={isOutsideVisibleRange}\n        className={clx(\n          \"bg-ui-bg-base txt-compact-small relative flex size-8 items-center justify-center rounded-md outline-none transition-fg border border-transparent\",\n          \"hover:bg-ui-bg-base-hover\",\n          \"focus-visible:shadow-borders-focus focus-visible:border-ui-border-interactive\",\n          {\n            \"!bg-ui-bg-interactive !text-ui-fg-on-color\": isSelected,\n            \"hidden\": isOutsideVisibleRange,\n            \"text-ui-fg-muted hover:!bg-ui-bg-base cursor-default\": isDisabled || isUnavailable,\n          }\n        )}\n      >\n        {formattedDate}\n        {isToday && (\n          <div\n            role=\"none\"\n            className={clx(\n              \"bg-ui-bg-interactive absolute bottom-[3px] left-1/2 size-[3px] -translate-x-1/2 rounded-full transition-fg\",\n              {\n                \"bg-ui-fg-on-color\": isSelected,\n              }\n            )}\n          />\n        )}\n      </div>\n    </td>\n  )\n}\n\n/**\n * Check if the date is today. The CalendarDate is using a 1-based index for the month.\n * @returns Whether the CalendarDate is today.\n */\nfunction getIsToday(date: CalendarDate) {\n  const today = new Date()\n  return (\n    [date.year, date.month, date.day].join(\"-\") ===\n    [today.getFullYear(), today.getMonth() + 1, today.getDate()].join(\"-\")\n  )\n}\n\nexport { CalendarCell }\n"]}