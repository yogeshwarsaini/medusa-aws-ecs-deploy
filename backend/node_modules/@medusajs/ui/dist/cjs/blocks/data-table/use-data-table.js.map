{"version":3,"file":"use-data-table.js","sourceRoot":"","sources":["../../../../src/blocks/data-table/use-data-table.tsx"],"names":[],"mappings":";;;;AAAA,uDAW8B;AAC9B,qDAA8B;AAC9B,mCAagB;AAsIhB,MAAM,YAAY,GAAG,CAAS,EAC5B,QAAQ,GAAG,CAAC,EACZ,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,SAAS,EACT,UAAU,EACV,MAAM,EACN,UAAU,EACV,kBAAkB,GAAG,IAAI,EACzB,SAAS,GAAG,KAAK,EACjB,GAAG,OAAO,EACc,EAA6B,EAAE;;IACvD,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,eAAe,EAAE,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAA;IAC9D,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,iBAAiB,EAAE,GAAG,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,EAAE,CAAA;IACpE,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,kBAAkB,EAAE,GAAG,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,EAAE,CAAA;IACvE,MAAM,EACJ,KAAK,EAAE,iBAAiB,EACxB,oBAAoB,EACpB,kBAAkB,GACnB,GAAG,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,EAAE,CAAA;IAEtB,MAAM,yBAAyB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACvD,OAAO,kBAAkB;YACvB,CAAC,CAAC,GAAG,EAAE,CACH,eAAe;iBACf,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAG,EAAE,GAAG,eAAe,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAA;YAC9D,CAAC,CAAC,SAAS,CAAA;IACf,CAAC,EAAE,CAAC,kBAAkB,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC,CAAA;IAE7D,MAAM,mBAAmB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACjD,OAAO,eAAe;YACpB,CAAC,CAAC,CAAC,cAAqC,EAAE,EAAE;;gBACxC,MAAA,yBAAyB,EAAE,2CAAI,CAAA;gBAC/B,0BAA0B,CACxB,eAAe,EACf,YAAY,CACb,CAAC,cAAc,CAAC,CAAA;YACnB,CAAC;YACH,CAAC,CAAC,SAAS,CAAA;IACf,CAAC,EAAE,CAAC,eAAe,EAAE,YAAY,EAAE,yBAAyB,CAAC,CAAC,CAAA;IAE9D,MAAM,wBAAwB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACtD,OAAO,oBAAoB;YACzB,CAAC,CAAC,CAAC,cAA0C,EAAE,EAAE;gBAC7C,+BAA+B,CAC7B,oBAAoB,EACpB,iBAAiB,CAClB,CAAC,cAAc,CAAC,CAAA;YACnB,CAAC;YACH,CAAC,CAAC,SAAS,CAAA;IACf,CAAC,EAAE,CAAC,oBAAoB,EAAE,iBAAiB,EAAE,yBAAyB,CAAC,CAAC,CAAA;IAExE,MAAM,qBAAqB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACnD,OAAO,iBAAiB;YACtB,CAAC,CAAC,CAAC,cAA2C,EAAE,EAAE;;gBAC9C,MAAA,yBAAyB,EAAE,2CAAI,CAAA;gBAC/B,4BAA4B,CAC1B,iBAAiB,EACjB,cAAc,CACf,CAAC,cAAc,CAAC,CAAA;YACnB,CAAC;YACH,CAAC,CAAC,SAAS,CAAA;IACf,CAAC,EAAE,CAAC,iBAAiB,EAAE,cAAc,EAAE,yBAAyB,CAAC,CAAC,CAAA;IAElE,MAAM,sBAAsB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACpD,OAAO,kBAAkB;YACvB,CAAC,CAAC,6BAA6B,CAAC,kBAAkB,EAAE,eAAe,CAAC;YACpE,CAAC,CAAC,SAAS,CAAA;IACf,CAAC,EAAE,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC,CAAA;IAEzC,MAAM,QAAQ,GAAG,IAAA,2BAAa,EAAC;QAC7B,GAAG,OAAO;QACV,eAAe,EAAE,IAAA,6BAAe,GAAE;QAClC,KAAK,EAAE;YACL,YAAY,EAAE,iBAAiB,aAAjB,iBAAiB,cAAjB,iBAAiB,GAAI,EAAE;YACrC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS;YAClD,aAAa,EAAE,MAAM,CAAC,OAAO,CAAC,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,EAAE,CAAC,CAAC,GAAG,CACrD,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjB,EAAE;gBACF,KAAK,EAAE,MAAM;aACd,CAAC,CACH;YACD,UAAU,EAAE,eAAe;SAC5B;QACD,kBAAkB;QAClB,QAAQ;QACR,qBAAqB,EAAE,qBAAqB,EAAE;QAC9C,oBAAoB,EAAE,wBAAwB,EAAE;QAChD,eAAe,EAAE,mBAAmB,EAAE;QACtC,kBAAkB,EAAE,sBAAsB,EAAE;QAC5C,aAAa,EAAE,IAAI;QACnB,gBAAgB,EAAE,IAAI;QACtB,eAAe,EAAE,IAAI;KACtB,CAAC,CAAA;IAEF,MAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;;QACxC,OAAO,MAAA,MAAA,QAAQ,CAAC,QAAQ,EAAE,CAAC,OAAO,0CAAG,CAAC,CAAC,mCAAI,IAAI,CAAA;IACjD,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAA;IAEd,MAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAClC,CACE,gBAAwE,EACxE,EAAE;;QACF,MAAM,WAAW,GAAG,MAAA,MAAA,QAAQ,CAAC,QAAQ,EAAE,CAAC,OAAO,0CAAG,CAAC,CAAC,mCAAI,IAAI,CAAA;QAC5D,MAAM,UAAU,GACd,OAAO,gBAAgB,KAAK,UAAU;YACpC,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC;YAC/B,CAAC,CAAC,gBAAgB,CAAA;QAEtB,MAAA,yBAAyB,EAAE,2CAAI,CAAA;QAC/B,QAAQ,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC,CAAA;IACnC,CAAC,EACD,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CACtC,CAAA;IAED,MAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACxC,OAAO,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAA;IACtB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAEb,MAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CACxC,CACE,EAAU,EACV,EAAE;QACF,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;QAE9D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,IAAI,CAAA;QACb,CAAC;QAED,OAAO,MAAM,CAAC,OAAqC,CAAA;IACrD,CAAC,EACD,CAAC,UAAU,CAAC,CACb,CAAA;IAED,MAAM,aAAa,GAAG,KAAK,CAAC,WAAW,CACrC,CAAC,EAAU,EAAE,EAAE;QACb,OAAO,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,IAAI,CAAA;IAChE,CAAC,EACD,CAAC,UAAU,CAAC,CACb,CAAA;IAED,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;;QAC1C,MAAM,KAAK,GAAG,MAAA,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,mCAAI,EAAE,CAAA;QACrD,OAAO,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IAC7E,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAA;IAEd,MAAM,SAAS,GAAG,KAAK,CAAC,WAAW,CACjC,CAAC,MAAoB,EAAE,EAAE;;QACvB,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACjB,MAAA,yBAAyB,EAAE,2CAAI,CAAA;QACjC,CAAC;QACD,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAG,EAAE,GAAG,YAAY,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;IACvE,CAAC,EACD,CAAC,iBAAiB,EAAE,YAAY,EAAE,yBAAyB,CAAC,CAC7D,CAAA;IAED,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CACpC,CAAC,EAAU,EAAE,EAAE;;QACb,MAAM,cAAc,GAAG,YAAY,EAAE,CAAA;QACrC,OAAO,cAAc,CAAC,EAAE,CAAC,CAAA;QACzB,MAAA,yBAAyB,EAAE,2CAAI,CAAA;QAC/B,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAG,cAAc,CAAC,CAAA;IACrC,CAAC,EACD,CAAC,iBAAiB,EAAE,YAAY,EAAE,yBAAyB,CAAC,CAC7D,CAAA;IAED,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;;QAC1C,MAAA,yBAAyB,EAAE,2CAAI,CAAA;QAC/B,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAG,EAAE,CAAC,CAAA;IACzB,CAAC,EAAE,CAAC,iBAAiB,EAAE,yBAAyB,CAAC,CAAC,CAAA;IAElD,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CACpC,CAAC,MAAoB,EAAE,EAAE;QACvB,SAAS,CAAC,MAAM,CAAC,CAAA;IACnB,CAAC,EACD,CAAC,SAAS,CAAC,CACZ,CAAA;IAED,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,GAAG,GAAG,EAAE,GAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAA;IAE3E,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,EAAE,CAAC,CAAA;IACvE,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,EAAiC,CAAA;IAEhE,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,cAAc,CAAC,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,EAAE,CAAC,CAAA;IACnC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAA;IAEjB,MAAM,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACvC,OAAO,WAAW,CAAA;IACpB,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAA;IAEjB,MAAM,qBAAqB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC/C,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,OAAO,SAAS,CAAA;QAClB,CAAC;QAED,OAAO,CAAC,KAAa,EAAE,EAAE;;YACvB,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC;gBACvB,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;YAClC,CAAC;YAED,IAAI,QAAQ,IAAI,CAAC,EAAE,CAAC;gBAClB,MAAA,yBAAyB,EAAE,2CAAI,CAAA;gBAC/B,cAAc,CAAC,KAAK,CAAC,CAAA;gBACrB,OAAM;YACR,CAAC;YAED,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;;gBACnC,MAAA,yBAAyB,EAAE,2CAAI,CAAA;gBAC/B,cAAc,CAAC,KAAK,CAAC,CAAA;YACvB,CAAC,EAAE,QAAQ,CAAC,CAAA;QACd,CAAC,CAAA;IACH,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,yBAAyB,CAAC,CAAC,CAAA;IAEzD,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,OAAO,GAAG,EAAE;YACV,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC;gBACvB,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;YAClC,CAAC;QACH,CAAC,CAAA;IACH,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,MAAM,qBAAqB,GAAG,KAAK,CAAC,WAAW,CAC7C,CAAC,MAAc,EAAE,EAAE;QACjB,cAAc,CAAC,MAAM,CAAC,CAAA;QACtB,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAG,MAAM,CAAC,CAAA;IACjC,CAAC,EACD,CAAC,qBAAqB,CAAC,CACxB,CAAA;IAED,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACzC,OAAO,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE,CAAA;IACvB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAA;IAEd,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QAC7C,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAA;IACzC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAA;IAEd,MAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,CAAA;IAExC,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACpC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;QAC/B,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;QACtC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;QAE/D,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,2BAAmB,CAAC,SAAS,CAAA;QACtC,CAAC;QAED,IAAI,SAAS,IAAI,UAAU,EAAE,CAAC;YAC5B,OAAO,2BAAmB,CAAC,cAAc,CAAA;QAC3C,CAAC;QAED,OAAO,2BAAmB,CAAC,KAAK,CAAA;IAClC,CAAC,EAAE,CAAC,IAAI,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC,CAAA;IAEvC,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACtC,OAAO,SAAS,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAA;IAChD,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAA;IAErB,MAAM,gBAAgB,GAAY,CAAC,CAAC,UAAU,CAAA;IAC9C,MAAM,eAAe,GAAY,CAAC,CAAC,SAAS,CAAA;IAC5C,MAAM,aAAa,GAAY,CAAC,CAAC,OAAO,CAAA;IACxC,MAAM,YAAY,GAAY,CAAC,CAAC,MAAM,CAAA;IAEtC,OAAO;QACL,QAAQ;QACR,eAAe,EAAE,QAAQ,CAAC,eAAe;QACzC,WAAW,EAAE,QAAQ,CAAC,WAAW;QACjC,aAAa,EAAE,QAAQ,CAAC,aAAa;QACrC,aAAa;QACb,gBAAgB;QAChB,cAAc,EAAE,QAAQ,CAAC,cAAc;QACvC,kBAAkB,EAAE,QAAQ,CAAC,kBAAkB;QAC/C,QAAQ,EAAE,QAAQ,CAAC,QAAQ;QAC3B,YAAY,EAAE,QAAQ,CAAC,YAAY;QACnC,YAAY,EAAE,QAAQ,CAAC,YAAY;QACnC,SAAS,EAAE,MAAA,MAAA,MAAA,QAAQ,CAAC,QAAQ,EAAE,0CAAE,UAAU,0CAAE,SAAS,mCAAI,CAAC;QAC1D,QAAQ,EAAE,MAAA,MAAA,MAAA,QAAQ,CAAC,QAAQ,EAAE,0CAAE,UAAU,0CAAE,QAAQ,mCAAI,EAAE;QACzD,QAAQ;QACR,SAAS;QACT,YAAY;QACZ,SAAS;QACT,cAAc,EAAE,qBAAqB;QACrC,UAAU;QACV,aAAa;QACb,UAAU;QACV,UAAU;QACV,YAAY;QACZ,eAAe;QACf,UAAU;QACV,gBAAgB;QAChB,aAAa;QACb,YAAY;QACZ,SAAS;QACT,YAAY;QACZ,YAAY;QACZ,YAAY;QACZ,WAAW;QACX,WAAW;QACX,eAAe;QACf,WAAW;QACX,UAAU;QACV,cAAc;QACd,UAAU;QACV,UAAU;QACV,SAAS;QACT,YAAY;KACb,CAAA;AACH,CAAC,CAAA;AAoEQ,oCAAY;AAlErB,SAAS,0BAA0B,CACjC,eAA4C,EAC5C,KAAyB;IAEzB,OAAO,CAAC,cAAqC,EAAE,EAAE;QAC/C,MAAM,KAAK,GACT,OAAO,cAAc,KAAK,UAAU;YAClC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACtC,CAAC,CAAC,cAAc,CAAA;QACpB,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;QAE3B,eAAe,CAAC,UAAU,CAAC,CAAA;IAC7B,CAAC,CAAA;AACH,CAAC;AAED,SAAS,+BAA+B,CACtC,oBAAwD,EACxD,KAAyB;IAEzB,OAAO,CAAC,cAA0C,EAAE,EAAE;QACpD,MAAM,KAAK,GACT,OAAO,cAAc,KAAK,UAAU;YAClC,CAAC,CAAC,cAAc,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,CAAC;YAC7B,CAAC,CAAC,cAAc,CAAA;QAEpB,oBAAoB,CAAC,KAAK,CAAC,CAAA;IAC7B,CAAC,CAAA;AACH,CAAC;AAED,SAAS,4BAA4B,CACnC,iBAA2D,EAC3D,KAA+B;IAE/B,OAAO,CAAC,cAA2C,EAAE,EAAE;QACrD,MAAM,KAAK,GACT,OAAO,cAAc,KAAK,UAAU;YAClC,CAAC,CAAC,cAAc,CACZ,MAAM,CAAC,OAAO,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjD,EAAE;gBACF,KAAK,EAAE,MAAM;aACd,CAAC,CAAC,CACJ;YACH,CAAC,CAAC,cAAc,CAAA;QAEpB,MAAM,gBAAgB,GAAG,MAAM,CAAC,WAAW,CACzC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAC3C,CAAA;QAED,iBAAiB,CAAC,gBAAgB,CAAC,CAAA;IACrC,CAAC,CAAA;AACH,CAAC;AAED,SAAS,6BAA6B,CACpC,kBAAoD,EACpD,KAAuB;IAEvB,OAAO,CAAC,cAAwC,EAAE,EAAE;QAClD,MAAM,KAAK,GACT,OAAO,cAAc,KAAK,UAAU;YAClC,CAAC,CAAC,cAAc,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;YACzD,CAAC,CAAC,cAAc,CAAA;QAEpB,kBAAkB,CAAC,KAAK,CAAC,CAAA;IAC3B,CAAC,CAAA;AACH,CAAC","sourcesContent":["import {\n  ColumnFilter,\n  ColumnFiltersState,\n  type ColumnSort,\n  getCoreRowModel,\n  PaginationState,\n  type RowSelectionState,\n  type SortingState,\n  type TableOptions,\n  type Updater,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport * as React from \"react\"\nimport {\n  DataTableColumnDef,\n  DataTableColumnFilter,\n  DataTableCommand,\n  DataTableDateComparisonOperator,\n  DataTableEmptyState,\n  DataTableFilter,\n  DataTableFilteringState,\n  DataTableFilterOption,\n  DataTablePaginationState,\n  DataTableRow,\n  DataTableRowSelectionState,\n  DataTableSortingState,\n} from \"./types\"\n\ninterface DataTableOptions<TData>\n  extends Pick<TableOptions<TData>, \"data\" | \"getRowId\"> {\n  /**\n   * The columns to use for the table.\n   */\n  columns: DataTableColumnDef<TData, any>[]\n  /**\n   * The filters which the user can apply to the table.\n   */\n  filters?: DataTableFilter[]\n  /**\n   * The commands which the user can apply to selected rows.\n   */\n  commands?: DataTableCommand[]\n  /**\n   * Whether the data for the table is currently being loaded.\n   */\n  isLoading?: boolean\n  /**\n   * The state and callback for the filtering.\n   */\n  filtering?: {\n    state: DataTableFilteringState\n    onFilteringChange: (state: DataTableFilteringState) => void\n  }\n  /**\n   * The state and callback for the row selection.\n   */\n  rowSelection?: {\n    state: DataTableRowSelectionState\n    onRowSelectionChange: (state: DataTableRowSelectionState) => void\n    enableRowSelection?:\n      | boolean\n      | ((row: DataTableRow<TData>) => boolean)\n      | undefined\n  }\n  /**\n   * The state and callback for the sorting.\n   */\n  sorting?: {\n    state: DataTableSortingState | null\n    onSortingChange: (state: DataTableSortingState) => void\n  }\n  /**\n   * The state and callback for the search, with optional debounce.\n   */\n  search?: {\n    state: string\n    onSearchChange: (state: string) => void\n    /**\n     * Debounce time in milliseconds for the search callback.\n     * @default 300\n     */\n    debounce?: number\n  }\n  /**\n   * The state and callback for the pagination.\n   */\n  pagination?: {\n    state: DataTablePaginationState\n    onPaginationChange: (state: DataTablePaginationState) => void\n  }\n  /**\n   * The function to execute when a row is clicked.\n   */\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    row: TData\n  ) => void\n  /**\n   * The total count of rows. When working with pagination, this will be the total\n   * number of rows available, not the number of rows currently being displayed.\n   */\n  rowCount?: number\n  /**\n   * Whether the page index should be reset the filtering, sorting, or pagination changes.\n   *\n   * @default true\n   */\n  autoResetPageIndex?: boolean\n}\n\ninterface UseDataTableReturn<TData>\n  extends Pick<\n    ReturnType<typeof useReactTable<TData>>,\n    | \"getHeaderGroups\"\n    | \"getRowModel\"\n    | \"getCanNextPage\"\n    | \"getCanPreviousPage\"\n    | \"nextPage\"\n    | \"previousPage\"\n    | \"getPageCount\"\n    | \"getAllColumns\"\n  > {\n  getSorting: () => DataTableSortingState | null\n  setSorting: (\n    sortingOrUpdater:\n      | DataTableSortingState\n      | ((prev: DataTableSortingState | null) => DataTableSortingState)\n  ) => void\n  getFilters: () => DataTableFilter[]\n  getFilterOptions: <\n    T extends string | string[] | DataTableDateComparisonOperator\n  >(\n    id: string\n  ) => DataTableFilterOption<T>[] | null\n  getFilterMeta: (id: string) => DataTableFilter | null\n  getFiltering: () => DataTableFilteringState\n  addFilter: (filter: DataTableColumnFilter) => void\n  removeFilter: (id: string) => void\n  clearFilters: () => void\n  updateFilter: (filter: DataTableColumnFilter) => void\n  getSearch: () => string\n  onSearchChange: (search: string) => void\n  getCommands: () => DataTableCommand[]\n  getRowSelection: () => DataTableRowSelectionState\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    row: TData\n  ) => void\n  emptyState: DataTableEmptyState\n  isLoading: boolean\n  showSkeleton: boolean\n  pageIndex: number\n  pageSize: number\n  rowCount: number\n  enablePagination: boolean\n  enableFiltering: boolean\n  enableSorting: boolean\n  enableSearch: boolean\n}\n\nconst useDataTable = <TData,>({\n  rowCount = 0,\n  filters,\n  commands,\n  rowSelection,\n  sorting,\n  filtering,\n  pagination,\n  search,\n  onRowClick,\n  autoResetPageIndex = true,\n  isLoading = false,\n  ...options\n}: DataTableOptions<TData>): UseDataTableReturn<TData> => {\n  const { state: sortingState, onSortingChange } = sorting ?? {}\n  const { state: filteringState, onFilteringChange } = filtering ?? {}\n  const { state: paginationState, onPaginationChange } = pagination ?? {}\n  const {\n    state: rowSelectionState,\n    onRowSelectionChange,\n    enableRowSelection,\n  } = rowSelection ?? {}\n\n  const autoResetPageIndexHandler = React.useCallback(() => {\n    return autoResetPageIndex\n      ? () =>\n          paginationState &&\n          onPaginationChange?.({ ...paginationState, pageIndex: 0 })\n      : undefined\n  }, [autoResetPageIndex, paginationState, onPaginationChange])\n\n  const sortingStateHandler = React.useCallback(() => {\n    return onSortingChange\n      ? (updaterOrValue: Updater<SortingState>) => {\n          autoResetPageIndexHandler()?.()\n          onSortingChangeTransformer(\n            onSortingChange,\n            sortingState\n          )(updaterOrValue)\n        }\n      : undefined\n  }, [onSortingChange, sortingState, autoResetPageIndexHandler])\n\n  const rowSelectionStateHandler = React.useCallback(() => {\n    return onRowSelectionChange\n      ? (updaterOrValue: Updater<RowSelectionState>) => {\n          onRowSelectionChangeTransformer(\n            onRowSelectionChange,\n            rowSelectionState\n          )(updaterOrValue)\n        }\n      : undefined\n  }, [onRowSelectionChange, rowSelectionState, autoResetPageIndexHandler])\n\n  const filteringStateHandler = React.useCallback(() => {\n    return onFilteringChange\n      ? (updaterOrValue: Updater<ColumnFiltersState>) => {\n          autoResetPageIndexHandler()?.()\n          onFilteringChangeTransformer(\n            onFilteringChange,\n            filteringState\n          )(updaterOrValue)\n        }\n      : undefined\n  }, [onFilteringChange, filteringState, autoResetPageIndexHandler])\n\n  const paginationStateHandler = React.useCallback(() => {\n    return onPaginationChange\n      ? onPaginationChangeTransformer(onPaginationChange, paginationState)\n      : undefined\n  }, [onPaginationChange, paginationState])\n\n  const instance = useReactTable({\n    ...options,\n    getCoreRowModel: getCoreRowModel(),\n    state: {\n      rowSelection: rowSelectionState ?? {},\n      sorting: sortingState ? [sortingState] : undefined,\n      columnFilters: Object.entries(filteringState ?? {}).map(\n        ([id, filter]) => ({\n          id,\n          value: filter,\n        })\n      ),\n      pagination: paginationState,\n    },\n    enableRowSelection,\n    rowCount,\n    onColumnFiltersChange: filteringStateHandler(),\n    onRowSelectionChange: rowSelectionStateHandler(),\n    onSortingChange: sortingStateHandler(),\n    onPaginationChange: paginationStateHandler(),\n    manualSorting: true,\n    manualPagination: true,\n    manualFiltering: true,\n  })\n\n  const getSorting = React.useCallback(() => {\n    return instance.getState().sorting?.[0] ?? null\n  }, [instance])\n\n  const setSorting = React.useCallback(\n    (\n      sortingOrUpdater: ColumnSort | ((prev: ColumnSort | null) => ColumnSort)\n    ) => {\n      const currentSort = instance.getState().sorting?.[0] ?? null\n      const newSorting =\n        typeof sortingOrUpdater === \"function\"\n          ? sortingOrUpdater(currentSort)\n          : sortingOrUpdater\n\n      autoResetPageIndexHandler()?.()\n      instance.setSorting([newSorting])\n    },\n    [instance, autoResetPageIndexHandler]\n  )\n\n  const getFilters = React.useCallback(() => {\n    return filters ?? []\n  }, [filters])\n\n  const getFilterOptions = React.useCallback(\n    <T extends string | string[] | DataTableDateComparisonOperator>(\n      id: string\n    ) => {\n      const filter = getFilters().find((filter) => filter.id === id)\n\n      if (!filter) {\n        return null\n      }\n\n      return filter.options as DataTableFilterOption<T>[]\n    },\n    [getFilters]\n  )\n\n  const getFilterMeta = React.useCallback(\n    (id: string) => {\n      return getFilters().find((filter) => filter.id === id) || null\n    },\n    [getFilters]\n  )\n\n  const getFiltering = React.useCallback(() => {\n    const state = instance.getState().columnFilters ?? []\n    return Object.fromEntries(state.map((filter) => [filter.id, filter.value]))\n  }, [instance])\n\n  const addFilter = React.useCallback(\n    (filter: ColumnFilter) => {\n      if (filter.value) {\n        autoResetPageIndexHandler()?.()\n      }\n      onFilteringChange?.({ ...getFiltering(), [filter.id]: filter.value })\n    },\n    [onFilteringChange, getFiltering, autoResetPageIndexHandler]\n  )\n\n  const removeFilter = React.useCallback(\n    (id: string) => {\n      const currentFilters = getFiltering()\n      delete currentFilters[id]\n      autoResetPageIndexHandler()?.()\n      onFilteringChange?.(currentFilters)\n    },\n    [onFilteringChange, getFiltering, autoResetPageIndexHandler]\n  )\n\n  const clearFilters = React.useCallback(() => {\n    autoResetPageIndexHandler()?.()\n    onFilteringChange?.({})\n  }, [onFilteringChange, autoResetPageIndexHandler])\n\n  const updateFilter = React.useCallback(\n    (filter: ColumnFilter) => {\n      addFilter(filter)\n    },\n    [addFilter]\n  )\n\n  const { state: searchState, onSearchChange, debounce = 300 } = search ?? {}\n\n  const [localSearch, setLocalSearch] = React.useState(searchState ?? \"\")\n  const timeoutRef = React.useRef<ReturnType<typeof setTimeout>>()\n\n  React.useEffect(() => {\n    setLocalSearch(searchState ?? \"\")\n  }, [searchState])\n\n  const getSearch = React.useCallback(() => {\n    return localSearch\n  }, [localSearch])\n\n  const debouncedSearchChange = React.useMemo(() => {\n    if (!onSearchChange) {\n      return undefined\n    }\n\n    return (value: string) => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n\n      if (debounce <= 0) {\n        autoResetPageIndexHandler()?.()\n        onSearchChange(value)\n        return\n      }\n\n      timeoutRef.current = setTimeout(() => {\n        autoResetPageIndexHandler()?.()\n        onSearchChange(value)\n      }, debounce)\n    }\n  }, [onSearchChange, debounce, autoResetPageIndexHandler])\n\n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  const onSearchChangeHandler = React.useCallback(\n    (search: string) => {\n      setLocalSearch(search)\n      debouncedSearchChange?.(search)\n    },\n    [debouncedSearchChange]\n  )\n\n  const getCommands = React.useCallback(() => {\n    return commands ?? []\n  }, [commands])\n\n  const getRowSelection = React.useCallback(() => {\n    return instance.getState().rowSelection\n  }, [instance])\n\n  const rows = instance.getRowModel().rows\n\n  const emptyState = React.useMemo(() => {\n    const hasRows = rows.length > 0\n    const hasSearch = Boolean(searchState)\n    const hasFilters = Object.keys(filteringState ?? {}).length > 0\n\n    if (hasRows) {\n      return DataTableEmptyState.POPULATED\n    }\n\n    if (hasSearch || hasFilters) {\n      return DataTableEmptyState.FILTERED_EMPTY\n    }\n\n    return DataTableEmptyState.EMPTY\n  }, [rows, searchState, filteringState])\n\n  const showSkeleton = React.useMemo(() => {\n    return isLoading === true && rows.length === 0\n  }, [isLoading, rows])\n\n  const enablePagination: boolean = !!pagination\n  const enableFiltering: boolean = !!filtering\n  const enableSorting: boolean = !!sorting\n  const enableSearch: boolean = !!search\n\n  return {\n    // Table\n    getHeaderGroups: instance.getHeaderGroups,\n    getRowModel: instance.getRowModel,\n    getAllColumns: instance.getAllColumns,\n    // Pagination\n    enablePagination,\n    getCanNextPage: instance.getCanNextPage,\n    getCanPreviousPage: instance.getCanPreviousPage,\n    nextPage: instance.nextPage,\n    previousPage: instance.previousPage,\n    getPageCount: instance.getPageCount,\n    pageIndex: instance.getState()?.pagination?.pageIndex ?? 0,\n    pageSize: instance.getState()?.pagination?.pageSize ?? 10,\n    rowCount,\n    // Search\n    enableSearch,\n    getSearch,\n    onSearchChange: onSearchChangeHandler,\n    // Sorting\n    enableSorting,\n    getSorting,\n    setSorting,\n    // Filtering\n    enableFiltering,\n    getFilters,\n    getFilterOptions,\n    getFilterMeta,\n    getFiltering,\n    addFilter,\n    removeFilter,\n    clearFilters,\n    updateFilter,\n    // Commands\n    getCommands,\n    getRowSelection,\n    // Handlers\n    onRowClick,\n    // Empty State\n    emptyState,\n    // Loading\n    isLoading,\n    showSkeleton,\n  }\n}\n\nfunction onSortingChangeTransformer(\n  onSortingChange: (state: ColumnSort) => void,\n  state?: ColumnSort | null\n) {\n  return (updaterOrValue: Updater<SortingState>) => {\n    const value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(state ? [state] : [])\n        : updaterOrValue\n    const columnSort = value[0]\n\n    onSortingChange(columnSort)\n  }\n}\n\nfunction onRowSelectionChangeTransformer(\n  onRowSelectionChange: (state: RowSelectionState) => void,\n  state?: RowSelectionState\n) {\n  return (updaterOrValue: Updater<RowSelectionState>) => {\n    const value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(state ?? {})\n        : updaterOrValue\n\n    onRowSelectionChange(value)\n  }\n}\n\nfunction onFilteringChangeTransformer(\n  onFilteringChange: (state: DataTableFilteringState) => void,\n  state?: DataTableFilteringState\n) {\n  return (updaterOrValue: Updater<ColumnFiltersState>) => {\n    const value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(\n            Object.entries(state ?? {}).map(([id, filter]) => ({\n              id,\n              value: filter,\n            }))\n          )\n        : updaterOrValue\n\n    const transformedValue = Object.fromEntries(\n      value.map((filter) => [filter.id, filter])\n    )\n\n    onFilteringChange(transformedValue)\n  }\n}\n\nfunction onPaginationChangeTransformer(\n  onPaginationChange: (state: PaginationState) => void,\n  state?: PaginationState\n) {\n  return (updaterOrValue: Updater<PaginationState>) => {\n    const value =\n      typeof updaterOrValue === \"function\"\n        ? updaterOrValue(state ?? { pageIndex: 0, pageSize: 10 })\n        : updaterOrValue\n\n    onPaginationChange(value)\n  }\n}\n\nexport { useDataTable }\nexport type { DataTableOptions, UseDataTableReturn }\n"]}