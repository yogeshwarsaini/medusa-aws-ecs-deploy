{"version":3,"file":"data-table-select-cell.js","sourceRoot":"","sources":["../../../../../src/blocks/data-table/components/data-table-select-cell.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAA;;;;AAMZ,oDAAsE;AACtE,qDAA8B;AAM9B,MAAM,mBAAmB,GAAG,CAC1B,KAAsC,EACtC,EAAE;IACF,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,CAAA;IAC7C,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAA;IACzD,MAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAA;IAE9C,OAAO,CACL,oBAAC,mBAAQ,IACP,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,EAAE,EACnC,OAAO,EAAE,OAAO,EAChB,eAAe,EAAE,QAAQ,EACzB,QAAQ,EAAE,QAAQ,GAClB,CACH,CAAA;AACH,CAAC,CAAA;AA+BQ,kDAAmB;AA9B5B,mBAAmB,CAAC,WAAW,GAAG,sBAAsB,CAAA;AAMxD,MAAM,qBAAqB,GAAG,CAC5B,KAAwC,EACxC,EAAE;IACF,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,yBAAyB,EAAE;QACzD,CAAC,CAAC,eAAe;QACjB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAA;IAE9C,MAAM,QAAQ,GAAG,CAAC,OAA6B,EAAE,EAAE;QACjD,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;IACtD,CAAC,CAAA;IACD,MAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK;SAC9B,WAAW,EAAE;SACb,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAA;IAEzC,OAAO,CACL,oBAAC,mBAAQ,IACP,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,EAAE,EACnC,OAAO,EAAE,OAAO,EAChB,eAAe,EAAE,QAAQ,EACzB,QAAQ,EAAE,QAAQ,GAClB,CACH,CAAA;AACH,CAAC,CAAA;AAE6B,sDAAqB","sourcesContent":["\"use client\"\n\nimport type {\n  DataTableCellContext,\n  DataTableHeaderContext,\n} from \"@/blocks/data-table/types\"\nimport { Checkbox, CheckboxCheckedState } from \"@/components/checkbox\"\nimport * as React from \"react\"\n\ninterface DataTableSelectCellProps<TData> {\n  ctx: DataTableCellContext<TData, unknown>\n}\n\nconst DataTableSelectCell = <TData,>(\n  props: DataTableSelectCellProps<TData>\n) => {\n  const checked = props.ctx.row.getIsSelected()\n  const onChange = props.ctx.row.getToggleSelectedHandler()\n  const disabled = !props.ctx.row.getCanSelect()\n\n  return (\n    <Checkbox\n      onClick={(e) => e.stopPropagation()}\n      checked={checked}\n      onCheckedChange={onChange}\n      disabled={disabled}\n    />\n  )\n}\nDataTableSelectCell.displayName = \"DataTable.SelectCell\"\n\ninterface DataTableSelectHeaderProps<TData> {\n  ctx: DataTableHeaderContext<TData, unknown>\n}\n\nconst DataTableSelectHeader = <TData,>(\n  props: DataTableSelectHeaderProps<TData>\n) => {\n  const checked = props.ctx.table.getIsSomePageRowsSelected()\n    ? \"indeterminate\"\n    : props.ctx.table.getIsAllPageRowsSelected()\n\n  const onChange = (checked: CheckboxCheckedState) => {\n    props.ctx.table.toggleAllPageRowsSelected(!!checked)\n  }\n  const disabled = !props.ctx.table\n    .getRowModel()\n    .rows.some((row) => row.getCanSelect())\n\n  return (\n    <Checkbox\n      onClick={(e) => e.stopPropagation()}\n      checked={checked}\n      onCheckedChange={onChange}\n      disabled={disabled}\n    />\n  )\n}\n\nexport { DataTableSelectCell, DataTableSelectHeader }\nexport type { DataTableSelectCellProps, DataTableSelectHeaderProps }\n"]}